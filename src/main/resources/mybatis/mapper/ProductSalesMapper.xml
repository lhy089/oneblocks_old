<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.oneblocks.repository.ProductSalesRepository">

	<select id="getMyProductSalesInfo" parameterType="Map" resultType="com.oneblocks.vo.NSalesVO"> 
		SELECT 
				SUM(SALES_QUANTITY) 	AS totalSalesQuantity
				, SUM(REVENUE) 			AS totalSalesRevenue 
		FROM PRODUCT_SALES 
		WHERE 1=1
			AND PRODUCT_ID IN
			<foreach collection="productIdList" item="productId" index="index" separator="," open="(" close=")">
            	#{productId}
        	</foreach>
        	AND 
			<foreach collection="dateList" item="date" index="index" separator="or" open="(" close=")">
            	(PSALES_ID BETWEEN #{date.startDate} AND #{date.endDate})
        	</foreach>
	</select>
	
	<select id="getProductSalesList" parameterType="com.oneblocks.parameter.CampaignListSearchParam" resultType="com.oneblocks.vo.ProductSalesVO"> 
		SELECT 
			P.PRODUCT_ID								as productId		
			, P.PRODUCT_NAME							as productName
			, ( SELECT MP.ON_OFF_YN 	
				FROM MEMBER_PRODUCT MP 
				WHERE MEMBER_Id= #{memberId} 
					AND MP.PRODUCT_ID = P.PRODUCT_ID) 	as onOffYn
			, IFNULL(PS.SALES_PRICE,-9999)				as productPrice
			, IFNULL(SUM(PS.SALES_QUANTITY),-9999)		as totalSalesQuantity
			, IFNULL(SUM(PS.REVENUE),-9999)				as totalSalesRevenue
			, IFNULL(MAX(UPDATE_DATE),-9999)				as updateDate
	FROM PRODUCT P
	LEFT JOIN PRODUCT_SALES PS ON P.PRODUCT_ID = PS.PRODUCT_ID
		<choose>
			<when test="dateList.size != 0">
				AND 
				<foreach collection="dateList" item="date" index="index" separator="or" open="(" close=")">
	            	(PS.PSALES_ID BETWEEN #{date.startDate} AND #{date.endDate})
	        	</foreach>
			</when>
			<otherwise>
				AND (PS.PSALES_ID BETWEEN '' AND '')
			</otherwise>
		</choose>
	WHERE 1=1
			AND P.PRODUCT_ID IN (
				SELECT PRODUCT_ID FROM PRODUCT WHERE CAMPAIGN_ID=#{campaignId}) 
	GROUP BY productId
	ORDER BY 
		<if test="searchParam.orderFlag!=null and !searchParam.orderFlag.equals('')">
			<choose>
				<when test="searchParam.orderFlag eq 'c'.toString()">
					productName ${searchParam.orderKind}
				</when>
				<when test="searchParam.orderFlag eq 'o'.toString()">
					onOffYn ${searchParam.orderKind}, productName
				</when>
				<when test="searchParam.orderFlag eq 'p'.toString()">
					cast(productPrice as unsigned) ${searchParam.orderKind}, productName
				</when>
				<when test="searchParam.orderFlag eq 'q'.toString()">
					totalSalesQuantity ${searchParam.orderKind}, productName
				</when>
				<when test="searchParam.orderFlag eq 'r'.toString()">
					totalSalesRevenue ${searchParam.orderKind}, productName
				</when>
				<when test="searchParam.orderFlag eq 'u'.toString()">
					updateDate ${searchParam.orderKind}, productName
				</when>
				<otherwise>
					productName ASC
				</otherwise>
			</choose>
		</if> 
	</select>
	
	<select id="getProductSalesByProductId" parameterType="com.oneblocks.parameter.CampaignListSearchParam" resultType="com.oneblocks.vo.ProductSalesVO">
		SELECT 
			PS.PRODUCT_ID		 					AS productId
			, (SELECT PRODUCT_NAME FROM PRODUCT WHERE PRODUCT_ID=#{productId}) AS productName
			, IFNULL(PS.SALES_PRICE,-9999)			AS productPrice
			, IFNULL(PS.SALES_QUANTITY,-9999)	 		AS totalSalesQuantity
			, IFNULL(PS.REVENUE,-9999)				AS totalSalesRevenue
			, IFNULL(PS.UPDATE_DATE,-9999) 			AS updateDate
	 	FROM PRODUCT_SALES PS 
		WHERE 1=1
	 		AND PS.PRODUCT_ID = #{productId}
	 		<choose>
				<when test="dateList.size != 0">
		 		AND
		 		<foreach collection="dateList" item="date" index="index" separator="or" open="(" close=")">
	            	(PS.PSALES_ID BETWEEN #{date.startDate} AND #{date.endDate})
	        	</foreach>
	        	</when>
	        	<otherwise>
					AND (PS.PSALES_ID BETWEEN '' AND '')
				</otherwise>
			</choose>
	 	ORDER BY 
		<if test="!searchParam.orderFlag.equals('') and searchParam.orderFlag!=null">
			<choose>
				<when test="searchParam.orderFlag eq 'c'.toString()">
					updateDate ${searchParam.orderKind}
				</when>
				<when test="searchParam.orderFlag eq 'p'.toString()">
					cast(productPrice as unsigned) ${searchParam.orderKind}
				</when>
				<when test="searchParam.orderFlag eq 'q'.toString()">
					totalSalesQuantity ${searchParam.orderKind}
				</when>
				<when test="searchParam.orderFlag eq 'r'.toString()">
					cast(totalSalesRevenue as unsigned) ${searchParam.orderKind}
				</when>
				<when test="searchParam.orderFlag eq 'u'.toString()">
					updateDate ${searchParam.orderKind}
				</when>
				<otherwise>
					updateDate ASC
				</otherwise>
			</choose>
		</if>
	</select>
	
	<select id="getDayBeforeYesterdayCampaignStockQuantity"  parameterType="map" resultType="String">
		SELECT 
			STOCK_QUANTITY
		FROM CAMPAIGN_SALES
		WHERE CAMPAIGN_ID = #{campaignId}
			AND SALES_ID = #{dayBeforeYesterday}
	</select>
	
	<select id="getDayBeforeYesterdayProductStockQuantity" parameterType="map" resultType="String">
		SELECT 
			STOCK_QUANTITY  
		FROM PRODUCT_SALES
		WHERE PRODUCT_ID = #{productId}
			AND PSALES_ID = #{dayBeforeYesterday}
	</select>
	
	<insert id="insertProductSalesInfo" parameterType="java.util.List">
		INSERT INTO PRODUCT_SALES
			(PSALES_ID, PRODUCT_ID, SALES_PRICE, SALES_QUANTITY, REVENUE, STOCK_QUANTITY, UPDATE_DATE)
		VALUES
		<foreach collection="list" item="item" index="i" separator="," >
				(#{item.psalesId}, #{item.productId}, #{item.salesPrice}, #{item.salesQuantity}, #{item.revenue}, #{item.stockQuantity}, now())		
		</foreach>
	</insert>
	
</mapper>
